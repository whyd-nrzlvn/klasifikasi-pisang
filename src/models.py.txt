# src/models.py

import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.applications import MobileNet, InceptionV3, DenseNet201
from tensorflow.keras.optimizers import Adam

def create_model(base_model_name='mobilenet', head_type='modified', num_classes=3, input_shape=(224, 224, 3)):
    """
    Membuat, memodifikasi, dan meng-compile model berdasarkan spesifikasi.

    Args:
        base_model_name (str): Pilihan 'mobilenet', 'inception', atau 'densenet'.
        head_type (str): Pilihan 'original' atau 'modified' untuk layer klasifikasi.
        num_classes (int): Jumlah kelas output.
        input_shape (tuple): Ukuran input gambar.

    Returns:
        tensorflow.keras.Model: Model yang sudah siap untuk training.
    """
    # Langkah 1: Pilih base model sesuai nama
    if base_model_name == 'mobilenet':
        base_model = MobileNet(input_shape=input_shape, include_top=False, weights='imagenet')
    elif base_model_name == 'inception':
        base_model = InceptionV3(input_shape=input_shape, include_top=False, weights='imagenet')
    elif base_model_name == 'densenet':
        base_model = DenseNet201(input_shape=input_shape, include_top=False, weights='imagenet')
    else:
        raise ValueError("Nama base_model tidak dikenal. Pilih 'mobilenet', 'inception', atau 'densenet'.")

    # Bekukan semua layer di base model
    base_model.trainable = False

    # Langkah 2: Bangun 'head' atau layer klasifikasi sesuai tipe
    if head_type == 'original':
        # Menggunakan code 'original' Anda
        x = base_model.layers[-2].output
        output = layers.Dense(num_classes, activation='softmax')(x)

    elif head_type == 'modified':
        # Menggunakan code 'modifikasi' Anda
        x = layers.GlobalAveragePooling2D()(base_model.output)
        x = layers.Dense(64, activation='relu')(x)
        x = layers.Dropout(0.2)(x)
        x = layers.Dense(128, activation='relu')(x)
        x = layers.Dropout(0.2)(x)
        x = layers.Dense(256, activation='relu')(x)
        x = layers.Dropout(0.2)(x)
        x = layers.Dense(128, activation='relu')(x)
        x = layers.Dropout(0.2)(x)
        output = layers.Dense(num_classes, activation='softmax')(x)
    else:
        raise ValueError("Tipe head tidak dikenal. Pilih 'original' atau 'modified'.")
    
    # Langkah 3: Gabungkan base model dengan head yang baru
    model = models.Model(inputs=base_model.input, outputs=output)

    # Langkah 4: Compile model
    model.compile(
        optimizer=Adam(learning_rate=0.001),
        loss='categorical_crossentropy',
        metrics=['accuracy']
    )

    print(f"\nModel berhasil dibuat: Base={base_model_name}, Head={head_type}")
    model.summary()
    
    return model